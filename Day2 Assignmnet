//1.Write the program for deleting an element from the beginning and from any position.

class LinkedList 
{ 
	Node head; // head of list 

	/* Linked list Node*/
	class Node 
	{ 
		int data; 
		Node next; 
		Node(int d) 
		{ 
			data = d; 
			next = null; 
		} 
	} 

	/* Inserts a new Node at front of the list. */
	public void push(int new_data) 
	{ 
		/* 1 & 2: Allocate the Node & 
				Put in the data*/
		Node new_node = new Node(new_data); 

		/* 3. Make next of new Node as head */
		new_node.next = head; 

		/* 4. Move the head to point to new Node */
		head = new_node; 
	} 

	/* Given a reference (pointer to pointer) to the head of a list 
	and a position, deletes the node at the given position */
	void deleteNode(int position) 
	{ 
		// If linked list is empty 
		if (head == null) 
			return; 

		// Store head node 
		Node temp = head; 

		// If head needs to be removed 
		if (position == 0) 
		{ 
			head = temp.next; // Change head 
			return; 
		} 

		// Find previous node of the node to be deleted 
		for (int i=0; temp!=null && i<position-1; i++) 
			temp = temp.next; 

		// If position is more than number of nodes 
		if (temp == null || temp.next == null) 
			return; 

		// Node temp->next is the node to be deleted 
		// Store pointer to the next of node to be deleted 
		Node next = temp.next.next; 

		temp.next = next; // Unlink the deleted node from list 
	} 

	/* This function prints contents of linked list starting from 
		the given node */
	public void printList() 
	{ 
		Node tnode = head; 
		while (tnode != null) 
		{ 
			System.out.print(tnode.data+" "); 
			tnode = tnode.next; 
		} 
	} 

	/* Driver program to test above functions. Ideally this function 
	should be in a separate user class. It is kept here to keep 
	code compact */
	public static void main(String[] args) 
	{ 
		/* Start with the empty list */
		LinkedList llist = new LinkedList(); 

		llist.push(7); 
		llist.push(1); 
		llist.push(3); 
		llist.push(2); 
		llist.push(8); 

		System.out.println("\nCreated Linked list is: "); 
		llist.printList(); 

		llist.deleteNode(4); // Delete node at position 4 

		System.out.println("\nLinked List after Deletion at position 4: "); 
		llist.printList(); 
	} 
} 



-----------------
//2.Write the program for printing the array after rotating it k times towards left, where k
would be taken as user input.

class RotateArray { 
	/*Function to left rotate arr[] of size n by d*/
	void leftRotate(int arr[], int d, int n) 
	{ 
		for (int i = 0; i < d; i++) 
			leftRotatebyOne(arr, n); 
	} 

	void leftRotatebyOne(int arr[], int n) 
	{ 
		int i, temp; 
		temp = arr[0]; 
		for (i = 0; i < n - 1; i++) 
			arr[i] = arr[i + 1]; 
		arr[i] = temp; 
	} 

	/* utility function to print an array */
	void printArray(int arr[], int n) 
	{ 
		for (int i = 0; i < n; i++) 
			System.out.print(arr[i] + " "); 
	} 

	// Driver program to test above functions 
	public static void main(String[] args) 
	{ 
		RotateArray rotate = new RotateArray(); 
		int arr[] = { 1, 2, 3, 4, 5, 6, 7 }; 
		rotate.leftRotate(arr, 2, 7); 
		rotate.printArray(arr, 7); 
	} 
} 
